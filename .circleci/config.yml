version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3
# Define the jobs we want to run for this project
aws-cli: circleci/aws-cli@2.0.3
commands:

  destroy_environment:
      steps:
        - run:
            name: Destroy Environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
 create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: 
              - "2c:23:16:05:7b:d4:ae:55:d7:7c:ad:93:bc:ad:d0:38" # You can get this ID in the section where you registered the SSH Key
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation create-stack \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --template-body file://template.yml \
                --region us-east-1     
        - destroy_environment
        
 configure_infrastructure: 
      docker:
        - image: cimg/python:3.11.0
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: 
              - "2c:23:16:05:7b:d4:ae:55:d7:7c:ad:93:bc:ad:d0:38" # You can get this ID in the section where you registered the SSH Key
        - run:
            name: Install dependencies
            command: |
              # install the dependencies needed for your playbook
              pip install --user ansible
        - run:
            name: Configure server
            command: |
              ansible-playbook -i inventory main-remote.yml   
              
 smoke_test: 
      docker:
        - image: alpine:latest
      steps:
        - run: apk add --update curl
        - run: apk add --no-cache aws-cli
        - run:
           name: smoke test
           command: |
             URL="http://ec2-3-87-78-25.compute-1.amazonaws.com:3000/"
             # Test if website exists
             if curl -s --head ${URL} 
             then
               return 0
             else
               return 1
             fi            
        - destroy_environment
        
 create_and_deploy_front_end:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
           name: Execute bucket.yml - Create Cloudformation Stack
           command: |
             aws cloudformation create-stack \
             --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
             --template-body file://bucket.yml \
             --parameters ParameterKey=MyBucketName,ParameterValue=mybucket-${CIRCLE_WORKFLOW_ID:0:7} \
             --region us-east-1
       # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
        - run: sleep('60')
        - run: aws s3 sync . s3://mybucket-e500e5a --delete       
  # Sequential workflow
  
 get_last_deployment_id:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
            command: |
            
              aws s3api list-buckets \
              --query "Buckets[?Name=='mybucket-${CIRCLE_WORKFLOW_ID:0:7}'].Name" \
              --region=us-east-1 \
              --no-paginate --output text > ~/textfile.txt
              
        - persist_to_workspace:
            root: ~/
            paths: 
              - textfile.txt 
 
workflows:
  my_workflow:
      jobs:
        - create_infrastructure
        - configure_infrastructure:
            requires:
              - create_infrastructure
        - smoke_test:
            requires:
              - configure_infrastructure
        - create_and_deploy_front_end:  
            requires:
              - smoke_test
        - get_last_deployment_id:
             requires:
              - create_and_deploy_front_end
        
